// üìÅ context/RoleContext.tsx
'use client';

import { createContext, useContext, useState, useEffect } from 'react';

// ‚úÖ Role ÌÉÄÏûÖ Ï†ïÏùò
type Role = 'admin' | 'manager' | 'viewer';

interface RoleContextType {
    role: Role;
    setRole: (role: Role) => void;
}

// ‚úÖ Context ÏÉùÏÑ±
const RoleContext = createContext<RoleContextType | undefined>(undefined);

// ‚úÖ Provider Ïª¥Ìè¨ÎÑåÌä∏
export const RoleProvider = ({ children }: { children: React.ReactNode }) => {
    const [role, setRole] = useState<Role>('admin'); // Í∏∞Î≥∏Í∞í 'admin'

    useEffect(() => {
        const storedRole = (localStorage.getItem('role') as Role) || 'admin';
        setRole(storedRole);
    }, []);

    const updateRole = (newRole: Role) => {
        localStorage.setItem('role', newRole);
        setRole(newRole);
    };

    return <RoleContext.Provider value={{ role, setRole: updateRole }}>{children}</RoleContext.Provider>;
};

// ‚úÖ Role ÏÇ¨Ïö© ÌõÖ
export const useRole = () => {
    const context = useContext(RoleContext);
    if (!context) {
        throw new Error('useRole must be used within a RoleProvider');
    }
    return context;
};
